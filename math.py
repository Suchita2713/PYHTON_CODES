# -*- coding: utf-8 -*-
"""math.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1r0LehYBCutx5uEopMwCNfkDY6Pp8hCzl
"""

# Missing no. in a array
def func(n,arr):
  return n*(n+1)//2-sum(arr)

a=[1,2,3,5]
n=len(a)+1
print(func(n,a))

# Trailing zeros in factorial
import math
def fact(n):
  f=math.factorial(n)            
  c=0
  while(f%10==0):             # can cause overflow
    c+=1                        
    f=f//10
  return c

n=20
print(fact(n))

# Trailing zeros in factorial 
# depends on the prime factors 2 and 5
def trail(N):
  c=0
  while(N>=5):
    N//=5
    c+=N
  return c

N=20
print(trail(N))

def fractionToDecimal(numerator,denominator):
        s=""
        q=numerator//denominator
        r=numerator%denominator
        s+=str(q)
        if(r==0):
            return s
        else:
            s+='.'
            d={}
            while(r!=0):
                if r in d:
                    p=s[:d[4]]+'('+s[d[r]:]+')'
                    s=p
                    break
        
                else:
                    d[r]=len(s)
                    r*=10
                    q=r//denominator
                    r=r%denominator
                    s+=str(q)
        return s
print(fractionToDecimal(4,333))

# Nth Natural Number that doesn't conatin 9
def fun(n):
  res=0
  p=1
  while(n>0):
    res+=p*(n%9)
    n=n//9
    p*=10
  return res
print(fun(9))

# Smallest Positive Integer that can not be represented as Sum
